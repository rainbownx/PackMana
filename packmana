#!/bin/bash

REPO_DIR="./packages"
CACHE_DIR="./cache"
REPO_LIST="./repos.list"
CONFIG="$HOME/.packmana_config"
INSTALL_DIR="./installed"

mkdir -p "$REPO_DIR" "$CACHE_DIR" "$INSTALL_DIR"
touch "$REPO_LIST"

first_run_setup() {
    echo "Welcome to Packmana!"
    echo "It looks like this is your first time running Packmana."
    echo ""
    echo "Please select which package repositories you'd like to add:"
    echo "1) Packmana Official Repo"
    echo "   https://rainbownx.github.io/PackMana-Respository"
    echo "2) Arch Linux Official Repo"
    echo "   https://gitlab.archlinux.org/archlinux"
    echo "3) Arch User Repository (AUR) (Unofficial)"
    echo "   https://aur.archlinux.org"
    echo "4) None / Add your own repo URL"

    read -rp "Enter numbers separated by commas (e.g. 1,3): " choices

    add_repo_safe() {
        local url="$1"
        if grep -Fxq "$url" "$REPO_LIST" 2>/dev/null; then
            echo "Repo already added: $url"
        else
            echo "$url" >> "$REPO_LIST"
            echo "Added repo: $url"
        fi
    }

    IFS=',' read -ra sel <<< "$choices"
    for choice in "${sel[@]}"; do
        case "$choice" in
            1) add_repo_safe "https://rainbownx.github.io/PackMana-Respository" ;;
            2) add_repo_safe "https://gitlab.archlinux.org/archlinux" ;;
            3) add_repo_safe "https://aur.archlinux.org" ;;
            4) echo "You chose to add your own repo URL." ;;
            *) echo "Ignoring invalid choice: $choice" ;;
        esac
    done

    read -rp "Do you want to add a custom repository URL? (y/N): " addcustom
    if [[ "$addcustom" =~ ^[Yy]$ ]]; then
        while true; do
            read -rp "Enter the full URL of your custom repo (or leave empty to finish): " customurl
            [[ -z "$customurl" ]] && break
            add_repo_safe "$customurl"
        done
    fi

    touch "$CONFIG"
    echo "Setup complete! You can add more repos anytime with 'packmana add-repo <url>'."
    echo ""
}

install_pkg() {
    pkgname="$1"
    pkgname="${pkgname%.tar.gz}"
    cachefile="$CACHE_DIR/$pkgname.tar.gz"
    localfile="$REPO_DIR/$pkgname.tar.gz"

    if [ -f "$localfile" ]; then
        echo "Installing $pkgname from local repository..."
        cp "$localfile" "$cachefile"
    else
        echo "Searching remote repositories for $pkgname..."
        found=0
        while read -r url; do
            baseurl="${url%/}"
            pkgurl="$baseurl/$pkgname.tar.gz"
            echo "Trying $pkgurl"
            if curl --fail --location --progress-bar -o "$cachefile" "$pkgurl"; then
                found=1
                break
            fi
        done < "$REPO_LIST"
        [ "$found" -ne 1 ] && echo "Package $pkgname not found." && exit 1
    fi

    echo "Extracting package..."
    tempdir=$(mktemp -d)
    tar -xzf "$cachefile" -C "$tempdir"
    scriptfile=$(find "$tempdir" -type f -name "*.sh" | head -n1)

    [ -z "$scriptfile" ] && echo "Error: No .sh script found." && rm -rf "$tempdir" && exit 1

    echo "Installing script $scriptfile to /usr/bin/$pkgname"
    sudo mv "$scriptfile" "/usr/bin/$pkgname"
    sudo chmod +x "/usr/bin/$pkgname"

    version="unknown"
    while read -r url; do
        baseurl="${url%/}"
        version_url="$baseurl/$pkgname.version"
        remote_version=$(curl -fsSL "$version_url" 2>/dev/null)
        [ -n "$remote_version" ] && version="$remote_version" && break
    done < "$REPO_LIST"

    echo "/usr/bin/$pkgname" > "$INSTALL_DIR/$pkgname.pkginfo"
    echo "$version" >> "$INSTALL_DIR/$pkgname.pkginfo"
    rm -rf "$tempdir"

    echo "Installed $pkgname (version: $version)."
}

remove_pkg() {
    pkgname="$1"
    pkginfo="$INSTALL_DIR/$pkgname.pkginfo"
    [ ! -f "$pkginfo" ] && echo "Not installed: $pkgname" && exit 1

    echo "Removing $pkgname..."
    while read -r file; do
        [[ "$file" == /* ]] && sudo rm -f "$file" && echo "Deleted $file"
    done < "$pkginfo"

    rm -f "$pkginfo"
    echo "Removed $pkgname."
}

list_pkgs() {
    echo "Installed packages:"
    for f in "$INSTALL_DIR"/*.pkginfo; do
        [ -e "$f" ] && basename "$f" .pkginfo
    done
}

search_pkgs() {
    echo "Available local packages:"
    for f in "$REPO_DIR"/*.tar.gz; do
        [ -e "$f" ] && basename "$f" .tar.gz
    done

    echo ""
    echo "Configured remote repositories:"
    cat "$REPO_LIST"
}

add_repo() {
    url="$1"
    grep -Fxq "$url" "$REPO_LIST" && echo "Repo exists." || echo "$url" >> "$REPO_LIST" && echo "Added $url"
}

remove_repo() {
    echo "Configured repositories:"
    mapfile -t repos < "$REPO_LIST"
    [ "${#repos[@]}" -eq 0 ] && echo "No repositories to remove." && return

    for i in "${!repos[@]}"; do
        printf "%d) %s\n" "$((i+1))" "${repos[$i]}"
    done

    read -rp "Enter the number to remove: " choice
    [[ ! "$choice" =~ ^[0-9]+$ || "$choice" -lt 1 || "$choice" -gt "${#repos[@]}" ]] && echo "Invalid." && return

    removed="${repos[$((choice-1))]}"
    unset 'repos[$((choice-1))]'
    printf "%s\n" "${repos[@]}" > "$REPO_LIST"
    echo "Removed: $removed"
}

list_repos() {
    echo "Configured repositories:"
    cat "$REPO_LIST"
}

repo_add() {
    echo "Enter path to your local .sh file:"
    read -r scriptpath
    [ ! -f "$scriptpath" ] && echo "File not found." && exit 1

    filename=$(basename -- "$scriptpath")
    pkgname="${filename%.*}"
    echo "Packaging $filename as $pkgname.tar.gz"

    tempdir=$(mktemp -d)
    cp "$scriptpath" "$tempdir/$filename"
    tar -czf "$REPO_DIR/$pkgname.tar.gz" -C "$tempdir" "$filename"
    rm -rf "$tempdir"

    echo "Created: $REPO_DIR/$pkgname.tar.gz"
    echo "Now git add/push to your repo to share it."
}

update_pkgs() {
    echo "Checking for updates..."
    for pkginfo in "$INSTALL_DIR"/*.pkginfo; do
        pkgname=$(basename "$pkginfo" .pkginfo)
        installed_version=$(sed -n '2p' "$pkginfo")
        echo "Checking $pkgname..."
        updated=0
        while read -r repo; do
            baseurl="${repo%/}"
            version_url="$baseurl/$pkgname.version"
            new_version=$(curl -fsSL "$version_url" 2>/dev/null)
            if [ -n "$new_version" ] && [ "$new_version" != "$installed_version" ]; then
                echo "Update for $pkgname: $installed_version -> $new_version"
                "$0" remove "$pkgname"
                "$0" install "$pkgname"
                updated=1
                break
            fi
        done < "$REPO_LIST"
        [ "$updated" -eq 0 ] && echo "$pkgname is up to date."
    done
}

usage() {
    echo "Usage: $0 {install|remove|list|search|add-repo|remove-repo|list-repos|repo-add|update} [package|url]"
}

[ ! -f "$CONFIG" ] && first_run_setup

case "$1" in
    install) [ -z "$2" ] && echo "Error: Please specify a package to install." && exit 1; install_pkg "$2" ;;
    remove) [ -z "$2" ] && echo "Error: Please specify a package to remove." && exit 1; remove_pkg "$2" ;;
    list) list_pkgs ;;
    search) search_pkgs ;;
    add-repo) [ -z "$2" ] && echo "Error: Please specify a repository URL." && exit 1; add_repo "$2" ;;
    remove-repo) remove_repo ;;
    list-repos) list_repos ;;
    repo-add) repo_add ;;
    update) update_pkgs ;;
    *) usage; exit 1 ;;
esac
