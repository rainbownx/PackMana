#!/bin/bash

# Base directories (change if needed)
BASE_DIR="$HOME/.packmana"
REPO_DIR="$BASE_DIR/packages"
CACHE_DIR="$BASE_DIR/cache"
REPO_LIST="$BASE_DIR/repos.list"
CONFIG="$BASE_DIR/.config"
INSTALL_DIR="$BASE_DIR/installed"

# Create needed directories and files
mkdir -p "$REPO_DIR" "$CACHE_DIR" "$INSTALL_DIR" "$(dirname "$REPO_LIST")"
touch "$REPO_LIST"
touch "$CONFIG"

first_run_setup() {
    echo "Welcome to Packmana!"
    echo "It looks like this is your first time running Packmana."
    echo ""
    echo "Please select which package repositories you'd like to add:"
    echo "1) Packmana Official Repo"
    echo "   https://rainbownx.github.io/PackMana-Respository"
    echo "2) Arch Linux Official Repo"
    echo "   https://gitlab.archlinux.org/archlinux"
    echo "3) Arch User Repository (AUR) (Unofficial)"
    echo "   https://aur.archlinux.org"
    echo "4) None / Add your own repo URL"
    read -rp "Enter numbers separated by commas (e.g. 1,3): " choices

    add_repo_safe() {
        local url="$1"
        if grep -Fxq "$url" "$REPO_LIST" 2>/dev/null; then
            echo "Repo already added: $url"
        else
            echo "$url" >> "$REPO_LIST"
            echo "Added repo: $url"
        fi
    }

    IFS=',' read -ra sel <<< "$choices"
    for choice in "${sel[@]}"; do
        case "$choice" in
            1) add_repo_safe "https://rainbownx.github.io/PackMana-Respository" ;;
            2) add_repo_safe "https://gitlab.archlinux.org/archlinux" ;;
            3) add_repo_safe "https://aur.archlinux.org" ;;
            4) echo "You chose to add your own repo URL." ;;
            *) echo "Ignoring invalid choice: $choice" ;;
        esac
    done

    read -rp "Do you want to add a custom repository URL? (y/N): " addcustom
    if [[ "$addcustom" =~ ^[Yy]$ ]]; then
        while true; do
            read -rp "Enter the full URL of your custom repo (or leave empty to finish): " customurl
            [[ -z "$customurl" ]] && break
            add_repo_safe "$customurl"
        done
    fi

    echo "Setup complete! You can add more repos anytime with 'packmana add-repo <url>'."
    echo ""
    touch "$CONFIG"
}

install_pkg() {
    local pkgname="${1%.tar.gz}"
    local cachefile="$CACHE_DIR/$pkgname.tar.gz"
    local localfile="$REPO_DIR/$pkgname.tar.gz"

    if [ -f "$localfile" ]; then
        echo "Installing $pkgname from local repository..."
        cp "$localfile" "$cachefile"
    else
        echo "Searching remote repositories for $pkgname..."
        local found=0
        while read -r url; do
            baseurl="${url%/}"
            pkgurl="$baseurl/$pkgname.tar.gz"
            echo "Trying $pkgurl"
            if curl --fail --location --progress-bar -o "$cachefile" "$pkgurl"; then
                found=1
                break
            fi
        done < "$REPO_LIST"

        if [ "$found" -ne 1 ]; then
            echo "Package $pkgname not found in any repository."
            exit 1
        fi
    fi

    echo "Extracting package..."
    local tempdir
    tempdir=$(mktemp -d)
    tar -xzf "$cachefile" -C "$tempdir"

    local scriptfile
    scriptfile=$(find "$tempdir" -type f -name "*.sh" | head -n1)
    if [ -z "$scriptfile" ]; then
        echo "Error: No .sh script file found inside the package."
        rm -rf "$tempdir"
        exit 1
    fi

    echo "Installing script $scriptfile to /usr/bin/$pkgname"
    sudo mv "$scriptfile" "/usr/bin/$pkgname" || { echo "Failed to move script. Check permissions."; exit 1; }
    sudo chmod +x "/usr/bin/$pkgname"

    # Get version info from repo or unknown
    local version="unknown"
    while read -r url; do
        baseurl="${url%/}"
        version_url="$baseurl/$pkgname.version"
        remote_version=$(curl -fsSL "$version_url" 2>/dev/null)
        if [ -n "$remote_version" ]; then
            version="$remote_version"
            break
        fi
    done < "$REPO_LIST"

    # Save install info: first line = path, second line = version
    {
      echo "/usr/bin/$pkgname"
      echo "$version"
    } > "$INSTALL_DIR/$pkgname.pkginfo"

    rm -rf "$tempdir"

    echo "Installed $pkgname successfully (version: $version)."
}

remove_pkg() {
    local pkgname="$1"
    local pkginfo="$INSTALL_DIR/$pkgname.pkginfo"

    if [ ! -f "$pkginfo" ]; then
        echo "Package not installed: $pkgname"
        exit 1
    fi

    echo "Removing $pkgname..."
    while read -r file; do
        # Delete files only if looks like paths
        [[ "$file" == /* ]] && sudo rm -f "$file" && echo "Deleted $file"
    done < "$pkginfo"

    rm -f "$pkginfo"
    echo "Removed $pkgname."
}

list_pkgs() {
    echo "Installed packages:"
    shopt -s nullglob
    local pkgfiles=("$INSTALL_DIR"/*.pkginfo)
    if [ ${#pkgfiles[@]} -eq 0 ]; then
        echo "No packages installed."
        return
    fi
    for f in "${pkgfiles[@]}"; do
        basename "$f" .pkginfo
    done
}

search_pkgs() {
    echo "Available local packages:"
    shopt -s nullglob
    local pkgs=("$REPO_DIR"/*.tar.gz)
    if [ ${#pkgs[@]} -eq 0 ]; then
        echo "No local packages found."
    else
        for f in "${pkgs[@]}"; do
            basename "$f" .tar.gz
        done
    fi
    echo ""
    echo "Configured remote repositories:"
    cat "$REPO_LIST"
}

add_repo() {
    local url="$1"
    if grep -Fxq "$url" "$REPO_LIST" 2>/dev/null; then
        echo "Repository already exists."
    else
        echo "$url" >> "$REPO_LIST"
        echo "Repository added: $url"
    fi
}

list_repos() {
    echo "Configured repositories:"
    cat "$REPO_LIST"
}

repo_add() {
    echo "Enter path to your local bash script (.sh or plain bash file):"
    read -r scriptpath

    if [ ! -f "$scriptpath" ]; then
        echo "File does not exist."
        exit 1
    fi

    local filename
    filename=$(basename -- "$scriptpath")
    local pkgname="${filename%.*}"

    echo "Packaging $filename as $pkgname.tar.gz"
    local tempdir
    tempdir=$(mktemp -d)
    cp "$scriptpath" "$tempdir/$filename"

    tar -czf "$REPO_DIR/$pkgname.tar.gz" -C "$tempdir" "$filename"
    rm -rf "$tempdir"

    echo "Package created at $REPO_DIR/$pkgname.tar.gz"
    echo ""
    echo "To add this package to your GitHub repo:"
    echo "1) Copy the package to your local GitHub Pages repo directory."
    echo "2) Commit and push the changes:"
    echo "   git add $pkgname.tar.gz"
    echo "   git commit -m 'Add package $pkgname'"
    echo "   git push"
    echo ""
    echo "You can also create a $pkgname.version file with the version string and add it similarly."
}

update_pkgs() {
    echo "Checking for package updates..."
    shopt -s nullglob
    local pkginfos=("$INSTALL_DIR"/*.pkginfo)
    if [ ${#pkginfos[@]} -eq 0 ]; then
        echo "No installed packages to update."
        return
    fi

    for pkginfo in "${pkginfos[@]}"; do
        local pkgname
        pkgname=$(basename "$pkginfo" .pkginfo)
        local installed_version
        installed_version=$(sed -n '2p' "$pkginfo")

        echo "Checking updates for $pkgname..."

        local updated=0
        while read -r repo; do
            local baseurl version_url new_version
            baseurl="${repo%/}"
            version_url="$baseurl/$pkgname.version"
            new_version=$(curl -fsSL "$version_url" 2>/dev/null)

            if [ -n "$new_version" ] && [[ "$new_version" != "$installed_version" ]]; then
                echo "Update found for $pkgname: $installed_version -> $new_version"
                "$0" remove "$pkgname"
                "$0" install "$pkgname"
                updated=1
                break
            fi
        done < "$REPO_LIST"

        if [ "$updated" -eq 0 ]; then
            echo "$pkgname is up to date."
        fi
    done
}

usage() {
    echo "Usage: $0 {install|remove|list|search|add-repo|list-repos|repo-add|update} [package|url]"
}

# Run first-time setup if config missing
if [ ! -f "$CONFIG" ]; then
    first_run_setup
fi

case "$1" in
    install)
        [ -z "$2" ] && { echo "Error: Please specify a package to install."; exit 1; }
        install_pkg "$2"
        ;;
    remove)
        [ -z "$2" ] && { echo "Error: Please specify a package to remove."; exit 1; }
        remove_pkg "$2"
        ;;
    list)
        list_pkgs
        ;;
    search)
        search_pkgs
        ;;
    add-repo)
        [ -z "$2" ] && { echo "Error: Please specify a repository URL to add."; exit 1; }
        add_repo "$2"
        ;;
    list-repos)
        list_repos
        ;;
    repo-add)
        repo_add
        ;;
    update)
        update_pkgs
        ;;
    *)
        usage
        exit 1
        ;;
esac
